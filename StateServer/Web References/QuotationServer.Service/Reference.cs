//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.573.
// 
namespace iExchange.StateServer.QuotationServer
{
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;

    using iExchange.Common;
    using System.Data;

    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "ServiceSoap", Namespace = "http://www.omnicare.com/QuotationServer/")]
    public class Service : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        public RegisterSoapHeader RegisterSoapHeader;

        /// <remarks/>
        public Service()
        {
            string urlSetting = System.Configuration.ConfigurationSettings.AppSettings["iExchange.StateServer.QuotationServer.Service"];
            if ((urlSetting != null))
            {
                this.Url = string.Concat(urlSetting, "");
            }
            else
            {
                this.Url = "http://localhost/iExchange/QuotationServer/Service.asmx";
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/HelloWorld", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string HelloWorld()
        {
            object[] results = this.Invoke("HelloWorld", new object[0]);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginHelloWorld(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("HelloWorld", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndHelloWorld(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/Register", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Register(Token token, string url)
        {
            object[] results = this.Invoke("Register", new object[] {
                        token,
                        url});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRegister(Token token, string url, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Register", new object[] {
                        token,
                        url}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndRegister(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [SoapHeader("RegisterSoapHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/SetQuotation", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetQuotation(Token token, string quotation, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.Invoke("SetQuotation", new object[] {
                        token,
                        quotation});
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/SetBestLimit", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetBestLimit(Token token, BestLimit[] bestLimits, out DateTime timeStamp)
        {
            object[] results = this.Invoke("SetBestLimit", new object[] {
                        token,
                        bestLimits});
            timeStamp = ((DateTime)(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetQuotation(Token token, string quotation, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetQuotation", new object[] {
                        token,
                        quotation}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndSetQuotation(System.IAsyncResult asyncResult, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.EndInvoke(asyncResult);
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [SoapHeader("RegisterSoapHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/FlushQuotations", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FlushQuotations(Token token)
        {
            object[] results = this.Invoke("FlushQuotations", new object[] { token });
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginFlushQuotations(Token token, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("FlushQuotations", new object[] { token }, callback, asyncState);
        }

        /// <remarks/>
        public bool EndFlushQuotations(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/ReplayQuotation", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReplayQuotation(Token token, string quotation, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.Invoke("ReplayQuotation", new object[] {
                        token,
                        quotation});
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginReplayQuotation(Token token, string quotation, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ReplayQuotation", new object[] {
                        token,
                        quotation}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndReplayQuotation(System.IAsyncResult asyncResult, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.EndInvoke(asyncResult);
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/DiscardQuotation", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DiscardQuotation(Token token, System.Guid instrumentID, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.Invoke("DiscardQuotation", new object[] {
                        token,
                        instrumentID});
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDiscardQuotation(Token token, System.Guid instrumentID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DiscardQuotation", new object[] {
                        token,
                        instrumentID}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndDiscardQuotation(System.IAsyncResult asyncResult, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.EndInvoke(asyncResult);
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/UpdateQuotePolicy", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateQuotePolicy(Token token, System.Xml.XmlNode quotePolicy, out int error)
        {
            object[] results = this.Invoke("UpdateQuotePolicy", new object[] {
                        token,
                        quotePolicy});
            error = ((int)results[1]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateQuotePolicy(Token token, System.Xml.XmlNode quotePolicy, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateQuotePolicy", new object[] {
                        token,
                        quotePolicy}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateQuotePolicy(System.IAsyncResult asyncResult, out int error)
        {
            object[] results = this.EndInvoke(asyncResult);
            error = ((int)results[1]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/UpdateQuotePolicies", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateQuotePolicies(Token token, System.Xml.XmlNode quotePolicies, out int error)
        {
            object[] results = this.Invoke("UpdateQuotePolicies", new object[] {
                        token,
                        quotePolicies});
            error = ((int)results[1]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateQuotePolicies(Token token, System.Xml.XmlNode quotePolicies, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateQuotePolicies", new object[] {
                        token,
                        quotePolicies}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateQuotePolicies(System.IAsyncResult asyncResult, out int error)
        {
            object[] results = this.EndInvoke(asyncResult);
            error = ((int)results[1]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/UpdateInstrumentDealer", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateInstrumentDealer(Token token, System.Data.DataSet instrumentSettingChanges)
        {
            this.Invoke("UpdateInstrumentDealer", new object[] {
                        token,
                        instrumentSettingChanges});
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateInstrumentDealer(Token token, System.Data.DataSet instrumentSettingChanges, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateInstrumentDealer", new object[] {
                        token,
                        instrumentSettingChanges}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateInstrumentDealer(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/Update", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update(Token token, System.Xml.XmlNode update)
        {
            object[] results = this.Invoke("Update", new object[] {
                        token,
                        update});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdate(Token token, System.Xml.XmlNode update, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Update", new object[] {
                        token,
                        update}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/UpdateHighLow", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateHighLow(Token token, string ip, Guid instrumentId, bool isOriginHiLo, string newInput, bool isUpdateHigh, out int batchProcessId, out string instrumentCode, out bool highBid, out bool lowBid, out DateTime updateTime, out DateTime minTimestamp, out Common.OverridedQuotation[] overridedQs, out int returnValue, out string errorMessage)
        {
            object[] results = this.Invoke("UpdateHighLow", new object[] {
                        token,
                        ip,
						instrumentId,
                        isOriginHiLo,
                        newInput,
                        isUpdateHigh});
            batchProcessId = ((int)(results[0]));
            instrumentCode = ((string)(results[1]));
            highBid = ((bool)(results[2]));
            lowBid = ((bool)(results[3]));
            updateTime = ((DateTime)(results[4]));
            minTimestamp = ((DateTime)(results[5]));
            overridedQs = ((Common.OverridedQuotation[])(results[6]));
            returnValue = ((int)(results[7]));
            errorMessage = ((string)(results[8]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateHighLow(Token token, string ip, string instrumentId, bool isOriginHiLo, string newInput, bool isUpdateHigh, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateHighLow", new object[] {
                        token,
                        ip,
                        instrumentId,
                        isOriginHiLo,
                        newInput,
                        isUpdateHigh}, callback, asyncState);
        }

        /// <remarks/>
        public void EndUpdateHighLow(System.IAsyncResult asyncResult, out int batchProcessId, out string instrumentCode, out bool highBid, out bool lowBid, out DateTime updateTime, out DateTime minTimestamp, out Common.OverridedQuotation[] overridedQs, out int returnValue, out string errorMessage)
        {
            object[] results = this.EndInvoke(asyncResult);
            batchProcessId = ((int)(results[0]));
            instrumentCode = ((string)(results[1]));
            highBid = ((bool)(results[2]));
            lowBid = ((bool)(results[3]));
            updateTime = ((DateTime)(results[4]));
            minTimestamp = ((DateTime)(results[5]));
            overridedQs = ((Common.OverridedQuotation[])(results[6]));
            returnValue = ((int)(results[7]));
            errorMessage = ((string)(results[8]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/RestoreHighLow", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RestoreHighLow(Token token, string ip, int batchProcessId, out Guid instrumentId, out string instrumentCode, out string newInput, out bool isUpdateHigh, out bool highBid, out bool lowBid, out DateTime minTimestamp, out Common.OverridedQuotation[] overridedQs, out int returnValue, out string errorMessage)
        {
            object[] results = this.Invoke("RestoreHighLow", new object[] {
                        token,
                        ip,
						batchProcessId});
            instrumentId = ((Guid)(results[0]));
            instrumentCode = ((string)(results[1]));
            newInput = ((string)(results[2]));
            isUpdateHigh = ((bool)(results[3]));
            highBid = ((bool)(results[4]));
            lowBid = ((bool)(results[5]));
            minTimestamp = ((DateTime)(results[6]));
            overridedQs = ((Common.OverridedQuotation[])(results[7]));
            returnValue = ((int)(results[8]));
            errorMessage = ((string)(results[9]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRestoreHighLow(Token token, string ip, int batchProcessId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RestoreHighLow", new object[] {
                        token,
                        ip,
                        batchProcessId}, callback, asyncState);
        }

        /// <remarks/>
        public void EndRestoreHighLow(System.IAsyncResult asyncResult, out Guid instrumentId, out string instrumentCode, out string newInput, out bool isUpdateHigh, out bool highBid, out bool lowBid, out DateTime minTimestamp, out Common.OverridedQuotation[] overridedQs, out int returnValue, out string errorMessage)
        {
            object[] results = this.EndInvoke(asyncResult);
            instrumentId = ((Guid)(results[0]));
            instrumentCode = ((string)(results[1]));
            newInput = ((string)(results[2]));
            isUpdateHigh = ((bool)(results[3]));
            highBid = ((bool)(results[4]));
            lowBid = ((bool)(results[5]));
            minTimestamp = ((DateTime)(results[6]));
            overridedQs = ((Common.OverridedQuotation[])(results[7]));
            returnValue = ((int)(results[8]));
            errorMessage = ((string)(results[9]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/FixOverridedQuotationHistory", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FixOverridedQuotationHistory(Token token, string quotation, bool needApplyAutoAdjustPoints, out Common.OriginQuotation[] originQs, out Common.OverridedQuotation[] overridedQs, out bool needBroadcastQuotation, out System.Xml.XmlNode fixChartDatas)
        {
            object[] results = this.Invoke("FixOverridedQuotationHistory", new object[] {
                        token,
						quotation,
                        needApplyAutoAdjustPoints});
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            needBroadcastQuotation = (bool)(results[3]);
            fixChartDatas = ((System.Xml.XmlNode)(results[4]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginFixOverridedQuotationHistory(Token token, string quotation, bool needApplyAutoAdjustPoints, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("FixOverridedQuotationHistory", new object[] {
                        token,
                        quotation,
                        needApplyAutoAdjustPoints}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndFixOverridedQuotationHistory(System.IAsyncResult asyncResult, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs, out bool needBroadcastQuotation, out System.Xml.XmlNode fixChartDatas)
        {
            object[] results = this.EndInvoke(asyncResult);
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            needBroadcastQuotation = (bool)(results[3]);
            fixChartDatas = ((System.Xml.XmlNode)(results[4]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/SetHistoryQuotation", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetHistoryQuotation(Token token, DateTime tradeDay, string quotation, bool needApplyAutoAdjustPoints, out Common.OriginQuotation[] originQs, out Common.OverridedQuotation[] overridedQs, out bool needBroadcast)
        {
            object[] results = this.Invoke("SetHistoryQuotation", new object[] {
                        token,
						tradeDay,
						quotation,
                        needApplyAutoAdjustPoints});
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            needBroadcast = (bool)(results[3]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetHistoryQuotation(Token token, DateTime tradeDay, string quotation, bool needApplyAutoAdjustPoints, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetHistoryQuotation", new object[] {
                        token,
						tradeDay,
                        quotation,
                        needApplyAutoAdjustPoints}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndSetHistoryQuotation(System.IAsyncResult asyncResult, out OriginQuotation[] originQs, out OverridedQuotation[] overridedQs, out bool needBroadcast)
        {
            object[] results = this.EndInvoke(asyncResult);
            originQs = ((OriginQuotation[])(results[1]));
            overridedQs = ((OverridedQuotation[])(results[2]));
            needBroadcast = (bool)(results[3]);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.omnicare.com/QuotationServer/UpdateOverridedQuotationHighLow", RequestNamespace = "http://www.omnicare.com/QuotationServer/", ResponseNamespace = "http://www.omnicare.com/QuotationServer/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateOverridedQuotationHighLow(Token token, Guid instrumentID, string quotation, out Common.OverridedQuotation[] overridedQs)
        {
            object[] results = this.Invoke("UpdateOverridedQuotationHighLow", new object[] {
                        token,
						instrumentID,
						quotation});
            overridedQs = ((OverridedQuotation[])(results[1]));
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateOverridedQuotationHighLow(Token token, Guid instrumentID, string quotation, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateOverridedQuotationHighLow", new object[] {
                        token,
						instrumentID,
                        quotation}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndUpdateOverridedQuotationHighLow(System.IAsyncResult asyncResult, out OverridedQuotation[] overridedQs)
        {
            object[] results = this.EndInvoke(asyncResult);
            overridedQs = ((OverridedQuotation[])(results[1]));
            return ((bool)(results[0]));
        }
    }
}