//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace iExchange.StateServer.ExchangeMapping {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="iExchangeMappingServiceSoap", Namespace="http://www.Omnicare.com/ExchangeMapping/")]
    public partial class iExchangeMappingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckLastSequenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilialeAddTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FilialeChangeSettingsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public iExchangeMappingService() {
            this.Url = global::iExchange.StateServer.Properties.Settings.Default.iExchange_StateServer_ExchangeMapping_iExchangeMappingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckLastSequenceCompletedEventHandler CheckLastSequenceCompleted;
        
        /// <remarks/>
        public event FilialeAddTransactionCompletedEventHandler FilialeAddTransactionCompleted;
        
        /// <remarks/>
        public event FilialeChangeSettingsCompletedEventHandler FilialeChangeSettingsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Omnicare.com/ExchangeMapping/CheckLastSequence", RequestNamespace="http://www.Omnicare.com/ExchangeMapping/", ResponseNamespace="http://www.Omnicare.com/ExchangeMapping/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckLastSequence(string exchangeCode, long lastSequence) {
            this.Invoke("CheckLastSequence", new object[] {
                        exchangeCode,
                        lastSequence});
        }
        
        /// <remarks/>
        public void CheckLastSequenceAsync(string exchangeCode, long lastSequence) {
            this.CheckLastSequenceAsync(exchangeCode, lastSequence, null);
        }
        
        /// <remarks/>
        public void CheckLastSequenceAsync(string exchangeCode, long lastSequence, object userState) {
            if ((this.CheckLastSequenceOperationCompleted == null)) {
                this.CheckLastSequenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckLastSequenceOperationCompleted);
            }
            this.InvokeAsync("CheckLastSequence", new object[] {
                        exchangeCode,
                        lastSequence}, this.CheckLastSequenceOperationCompleted, userState);
        }
        
        private void OnCheckLastSequenceOperationCompleted(object arg) {
            if ((this.CheckLastSequenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckLastSequenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Omnicare.com/ExchangeMapping/FilialeAddTransaction", RequestNamespace="http://www.Omnicare.com/ExchangeMapping/", ResponseNamespace="http://www.Omnicare.com/ExchangeMapping/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FilialeAddTransaction(string filialeCode, System.Guid id, string xmlTran) {
            this.Invoke("FilialeAddTransaction", new object[] {
                        filialeCode,
                        id,
                        xmlTran});
        }
        
        /// <remarks/>
        public void FilialeAddTransactionAsync(string filialeCode, System.Guid id, string xmlTran) {
            this.FilialeAddTransactionAsync(filialeCode, id, xmlTran, null);
        }
        
        /// <remarks/>
        public void FilialeAddTransactionAsync(string filialeCode, System.Guid id, string xmlTran, object userState) {
            if ((this.FilialeAddTransactionOperationCompleted == null)) {
                this.FilialeAddTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilialeAddTransactionOperationCompleted);
            }
            this.InvokeAsync("FilialeAddTransaction", new object[] {
                        filialeCode,
                        id,
                        xmlTran}, this.FilialeAddTransactionOperationCompleted, userState);
        }
        
        private void OnFilialeAddTransactionOperationCompleted(object arg) {
            if ((this.FilialeAddTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilialeAddTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.Omnicare.com/ExchangeMapping/FilialeChangeSettings", RequestNamespace="http://www.Omnicare.com/ExchangeMapping/", ResponseNamespace="http://www.Omnicare.com/ExchangeMapping/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FilialeChangeSettings(string filialeCode, System.Guid id, string tableName, string stringParentId, string requestXml, System.Guid userId1) {
            this.Invoke("FilialeChangeSettings", new object[] {
                        filialeCode,
                        id,
                        tableName,
                        stringParentId,
                        requestXml,
                        userId1});
        }
        
        /// <remarks/>
        public void FilialeChangeSettingsAsync(string filialeCode, System.Guid id, string tableName, string stringParentId, string requestXml, System.Guid userId1) {
            this.FilialeChangeSettingsAsync(filialeCode, id, tableName, stringParentId, requestXml, userId1, null);
        }
        
        /// <remarks/>
        public void FilialeChangeSettingsAsync(string filialeCode, System.Guid id, string tableName, string stringParentId, string requestXml, System.Guid userId1, object userState) {
            if ((this.FilialeChangeSettingsOperationCompleted == null)) {
                this.FilialeChangeSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFilialeChangeSettingsOperationCompleted);
            }
            this.InvokeAsync("FilialeChangeSettings", new object[] {
                        filialeCode,
                        id,
                        tableName,
                        stringParentId,
                        requestXml,
                        userId1}, this.FilialeChangeSettingsOperationCompleted, userState);
        }
        
        private void OnFilialeChangeSettingsOperationCompleted(object arg) {
            if ((this.FilialeChangeSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FilialeChangeSettingsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckLastSequenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FilialeAddTransactionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FilialeChangeSettingsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591